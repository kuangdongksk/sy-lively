import { Button, Form, Modal } from "antd";
import { forwardRef, Ref, useImperativeHandle, useState } from "react";
import { useStyle } from "./index.style";

export type TхвЮцФ╣цЯе = "ц╖╗хКа" | "ч╝Цш╛С" | "цЯечЬЛ" | undefined;

export interface IхвЮцФ╣цЯех╝╣чкЧшбихНХProps {
  х╝╣чкЧф╕╗щвШ: string;

  шбихНХхЖЕхо╣: (х╝╣чкЧчК╢цАБ: TхвЮцФ╣цЯе) => React.ReactNode;
  чбошодцМЙщТоцЦЗцЬм?: string;
  х╝╣чкЧхПЦц╢И?: (() => void) | (() => Promise<void>);
  цПРф║дшбихНХ: (value: any, х╝╣чкЧчК╢цАБ: TхвЮцФ╣цЯе) => void | Promise<void>;
}

export interface IхвЮцФ╣цЯех╝╣чкЧшбихНХRef {
  ф╗дшбихНХчК╢цАБф╕║: (шбихНХчК╢цАБ: TхвЮцФ╣цЯе) => void;
  ф╗дшбихНХхА╝ф╕║: (шбихНХхА╝: any) => void;
}

function OхвЮцФ╣цЯех╝╣чкЧшбихНХ(
  props: IхвЮцФ╣цЯех╝╣чкЧшбихНХProps,
  ref: Ref<IхвЮцФ╣цЯех╝╣чкЧшбихНХRef>
) {
  const {
    х╝╣чкЧф╕╗щвШ,
    шбихНХхЖЕхо╣,
    чбошодцМЙщТоцЦЗцЬм = "чбохоЪ",
    х╝╣чкЧхПЦц╢И,
    цПРф║дшбихНХ,
  } = props;
  const { styles } = useStyle();

  const [шбихНХчК╢цАБ, ф╗дшбихНХчК╢цАБф╕║] = useState<TхвЮцФ╣цЯе>();
  const [шбихНХхА╝, ф╗дшбихНХхА╝ф╕║] = useState<any>();

  useImperativeHandle(ref, () => {
    return { ф╗дшбихНХчК╢цАБф╕║, ф╗дшбихНХхА╝ф╕║ };
  });

  return (
    <Modal
      footer={false}
      open={шбихНХчК╢цАБ !== undefined}
      title={шбихНХчК╢цАБ + х╝╣чкЧф╕╗щвШ}
      onCancel={async () => {
        await х╝╣чкЧхПЦц╢И?.();
        ф╗дшбихНХчК╢цАБф╕║(undefined);
      }}
      destroyOnClose
    >
      <Form
        className={styles.шбихНХ}
        labelCol={{ span: 4 }}
        initialValues={шбихНХхА╝}
        variant={шбихНХчК╢цАБ === "цЯечЬЛ" ? "borderless" : "outlined"}
        validateTrigger="onBlur"
        onFinish={async (value) => {
          console.log("ЁЯЪА ~ onFinish={ ~ value:", value);
          await цПРф║дшбихНХ(value, шбихНХчК╢цАБ);
          ф╗дшбихНХчК╢цАБф╕║(undefined);
        }}
      >
        {шбихНХхЖЕхо╣(шбихНХчК╢цАБ)}
        {шбихНХчК╢цАБ !== "цЯечЬЛ" && (
          <Form.Item
            style={{
              textAlign: "center",
            }}
          >
            {/* <Button
              className={styles.хПЦц╢ИцМЙщТо}
              onClick={async () => {
                await х╝╣чкЧхПЦц╢И?.();
                ф╗дшбихНХчК╢цАБф╕║(undefined);
              }}
            >
              хПЦц╢И
            </Button> */}
            <Button type="primary" htmlType="submit">
              {чбошодцМЙщТоцЦЗцЬм}
            </Button>
          </Form.Item>
        )}
      </Form>
    </Modal>
  );
}

const хвЮцФ╣цЯех╝╣чкЧшбихНХ = forwardRef(OхвЮцФ╣цЯех╝╣чкЧшбихНХ) as (
  props: IхвЮцФ╣цЯех╝╣чкЧшбихНХProps & { ref?: Ref<IхвЮцФ╣цЯех╝╣чкЧшбихНХRef> }
) => ReturnType<typeof OхвЮцФ╣цЯех╝╣чкЧшбихНХ>;
export default хвЮцФ╣цЯех╝╣чкЧшбихНХ;
